{
	"name": "df_socioeconomica",
	"properties": {
		"folder": {
			"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_SOCIOECONOMICA"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DIM_SOCIOECONOMICA_PARQUET",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_SOCIOECONOMICA_PARQUET",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn"
				},
				{
					"name": "definciontipodecampo"
				},
				{
					"name": "actualizacionycreaciondelhash"
				},
				{
					"name": "verificaciondeduplicados"
				}
			],
			"scriptLines": [
				"source(output(",
				"          codigo_interno_rango_ficha as decimal(38,18),",
				"          quintil as decimal(38,18),",
				"          descripcion_quintil as string,",
				"          nivel as string,",
				"          raf_limite_inferior as decimal(38,18),",
				"          raf_limite_superior as decimal(38,18),",
				"          aud_fecha_adicion as timestamp,",
				"          aud_fecha_modificacion as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source",
				"source derive(codigo_interno_rango_ficha = iifNull(codigo_interno_rango_ficha, -1),",
				"          quintil = iifNull(quintil, -1),",
				"          descripcion_quintil = iifNull(descripcion_quintil, \"SIN DATO\"),",
				"          nivel = iifNull(nivel, \"SIN DATO\"),",
				"          raf_limite_inferior = iifNull(raf_limite_inferior, -1),",
				"          raf_limite_superior = iifNull(raf_limite_superior, -1),",
				"          aud_fecha_adicion = iif(    isNull(aud_fecha_adicion) || toString(aud_fecha_adicion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_adicion, 'yyyy-MM-dd'))),",
				"          aud_fecha_modificacion = iif(    isNull(aud_fecha_modificacion) || toString(aud_fecha_modificacion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_modificacion, 'yyyy-MM-dd')))) ~> derivedColumn",
				"verificaciondeduplicados cast(output(",
				"          HASH as string,",
				"          codigo_interno_rango_ficha as integer,",
				"          quintil as integer,",
				"          descripcion_quintil as string,",
				"          nivel as string,",
				"          raf_limite_inferior as integer,",
				"          raf_limite_superior as integer,",
				"          aud_fecha_adicion as date,",
				"          aud_fecha_modificacion as date,",
				"          FECHA_ULTIMA_ACTUALIZACION as date,",
				"          LINAJE as string",
				"     ),",
				"     errors: true) ~> definciontipodecampo",
				"derivedColumn derive(HASH = md5(concat(toString(codigo_interno_rango_ficha), toString(quintil), descripcion_quintil, nivel, toString(raf_limite_inferior), toString(raf_limite_superior), toString(aud_fecha_adicion), toString(aud_fecha_modificacion))),",
				"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
				"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
				"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
				"     codigo_interno_rango_ficha = max(codigo_interno_rango_ficha),",
				"          quintil = max(quintil),",
				"          descripcion_quintil = max(descripcion_quintil),",
				"          nivel = max(nivel),",
				"          raf_limite_inferior = max(raf_limite_inferior),",
				"          raf_limite_superior = max(raf_limite_superior),",
				"          aud_fecha_adicion = max(aud_fecha_adicion),",
				"          aud_fecha_modificacion = max(aud_fecha_modificacion),",
				"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
				"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
				"definciontipodecampo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['DIM_SOCIOECONOMICA_FINAL.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}