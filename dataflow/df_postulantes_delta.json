{
	"name": "df_postulantes_delta",
	"properties": {
		"folder": {
			"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_POSTULANTES"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DIM_POSTULANTE_PARQUET",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_POSTULANTE_PARQUET",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "updatenullvaluesformat"
				},
				{
					"name": "vericacionduplicados"
				},
				{
					"name": "definciontipodecampo"
				},
				{
					"name": "updatecreatehash"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          codigo_interno_pos_alu as integer,",
				"          tipo_identificacion as string,",
				"          nro_identificacion as string,",
				"          nombres as string,",
				"          apellidos as string,",
				"          correo_personal as string,",
				"          correo_institucional as string,",
				"          genero as string,",
				"          etnia as string,",
				"          estado_civil as string,",
				"          fecha_nacimiento as timestamp,",
				"          telefono as string,",
				"          celular as string,",
				"          indicador_extranjero as string,",
				"          nacionalidad as string,",
				"          tiene_discapacidad as string,",
				"          sufre_enfermedad_catastrofica as string,",
				"          estudiante_tiene_trastorno_aprendizaje as string,",
				"          pais_nacimiento as string,",
				"          region_nacimiento as string,",
				"          provincia_nacimiento as string,",
				"          ciudad_nacimiento as string,",
				"          parroquia_nacimiento as string,",
				"          pais_residencia as string,",
				"          region_residencia as string,",
				"          provincia_residencia as string,",
				"          ciudad_residencia as string,",
				"          parroquia_residencia as string,",
				"          direccion_calle_principal as string,",
				"          direccion_calle_secundaria as string,",
				"          barrio_sector as string,",
				"          aud_fecha_adicion as timestamp,",
				"          aud_fecha_modificacion as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source",
				"source derive(codigo_interno_pos_alu = iifNull(codigo_interno_pos_alu, -1),",
				"          tipo_identificacion = iifNull(tipo_identificacion, 'SIN DATO'),",
				"          nro_identificacion = iifNull(nro_identificacion, 'SIN DATO'),",
				"          nombres = iifNull(nombres, 'SIN DATO'),",
				"          apellidos = iifNull(apellidos, 'SIN DATO'),",
				"          correo_personal = iifNull(correo_personal, 'SIN DATO'),",
				"          correo_institucional = iifNull(correo_institucional, 'SIN DATO'),",
				"          genero = iifNull(genero, 'SIN DATO'),",
				"          etnia = iifNull(etnia, 'SIN DATO'),",
				"          estado_civil = iifNull(estado_civil,'SIN DATO'),",
				"          fecha_nacimiento = iif(    isNull(fecha_nacimiento) || toString(fecha_nacimiento) == '',    toDate('1900-01-01'),    toDate(toString(fecha_nacimiento, 'yyyy-MM-dd'))),",
				"          telefono = iifNull(telefono, 'SIN DATO'),",
				"          celular = iifNull(celular, \"SIN DATO\"),",
				"          indicador_extranjero = iifNull(indicador_extranjero, \"SIN DATO\"),",
				"          nacionalidad = iifNull(nacionalidad, \"SIN DATO\"),",
				"          tiene_discapacidad = iifNull(tiene_discapacidad, \"FALSE\"),",
				"          sufre_enfermedad_catastrofica = iifNull(sufre_enfermedad_catastrofica, \"FALSE\"),",
				"          estudiante_tiene_trastorno_aprendizaje = iifNull(estudiante_tiene_trastorno_aprendizaje, \"FALSE\"),",
				"          pais_nacimiento = iifNull(pais_nacimiento, \"SIN DATO\"),",
				"          region_nacimiento = iifNull(region_nacimiento, \"SIN DATO\"),",
				"          provincia_nacimiento = iifNull(provincia_nacimiento, \"SIN DATO\"),",
				"          ciudad_nacimiento = iifNull(ciudad_nacimiento, \"SIN DATO\"),",
				"          parroquia_nacimiento = iifNull(parroquia_nacimiento, \"SIN DATO\"),",
				"          pais_residencia = iifNull(pais_residencia, \"SIN DATO\"),",
				"          region_residencia = iifNull(region_residencia, \"SIN DATO\"),",
				"          provincia_residencia = iifNull(provincia_residencia, \"SIN DATO\"),",
				"          ciudad_residencia = iifNull(ciudad_residencia, \"SIN DATO\"),",
				"          parroquia_residencia = iifNull(parroquia_residencia, \"SIN DATO\"),",
				"          direccion_calle_principal = iif(or(isNull(direccion_calle_principal), equals(direccion_calle_principal, \".\")), \"SIN DATO\", direccion_calle_principal),",
				"          direccion_calle_secundaria = iif(or(isNull(direccion_calle_secundaria), equals(direccion_calle_secundaria, \".\")), \"SIN DATO\", direccion_calle_secundaria),",
				"          barrio_sector = iif(or(isNull(barrio_sector), equals(barrio_sector, \".\")), \"SIN DATO\", barrio_sector),",
				"          aud_fecha_adicion = iif(    isNull(aud_fecha_adicion) || toString(aud_fecha_adicion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_adicion, 'yyyy-MM-dd'))),",
				"          aud_fecha_modificacion = iif(    isNull(aud_fecha_modificacion) || toString(aud_fecha_modificacion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_modificacion, 'yyyy-MM-dd')))) ~> updatenullvaluesformat",
				"updatecreatehash aggregate(groupBy(HASH),",
				"     codigo_interno_pos_alu = max(codigo_interno_pos_alu),",
				"          tipo_identificacion = max(tipo_identificacion),",
				"          nro_identificacion = max(nro_identificacion),",
				"          nombres = max(nombres),",
				"          apellidos = max(apellidos),",
				"          correo_personal = max(correo_personal),",
				"          correo_institucional = max(correo_institucional),",
				"          genero = max(genero),",
				"          etnia = max(etnia),",
				"          estado_civil = max(estado_civil),",
				"          fecha_nacimiento = max(fecha_nacimiento),",
				"          telefono = max(telefono),",
				"          celular = max(celular),",
				"          indicador_extranjero = max(indicador_extranjero),",
				"          nacionalidad = max(nacionalidad),",
				"          tiene_discapacidad = max(tiene_discapacidad),",
				"          sufre_enfermedad_catastrofica = max(sufre_enfermedad_catastrofica),",
				"          estudiante_tiene_trastorno_aprendizaje = max(estudiante_tiene_trastorno_aprendizaje),",
				"          pais_nacimiento = max(pais_nacimiento),",
				"          region_nacimiento = max(region_nacimiento),",
				"          provincia_nacimiento = max(provincia_nacimiento),",
				"          ciudad_nacimiento = max(ciudad_nacimiento),",
				"          parroquia_nacimiento = max(parroquia_nacimiento),",
				"          pais_residencia = max(pais_residencia),",
				"          region_residencia = max(region_residencia),",
				"          provincia_residencia = max(provincia_residencia),",
				"          ciudad_residencia = max(ciudad_residencia),",
				"          parroquia_residencia = max(parroquia_residencia),",
				"          direccion_calle_principal = max(direccion_calle_principal),",
				"          direccion_calle_secundaria = max(direccion_calle_secundaria),",
				"          barrio_sector = max(barrio_sector),",
				"          aud_fecha_adicion = max(aud_fecha_adicion),",
				"          aud_fecha_modificacion = max(aud_fecha_modificacion),",
				"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
				"          LINAJE = max(LINAJE)) ~> vericacionduplicados",
				"filter1 cast(output(",
				"          HASH as string",
				"     ),",
				"     errors: true) ~> definciontipodecampo",
				"updatenullvaluesformat derive(HASH = md5(concat(toString(codigo_interno_pos_alu),",
				"tipo_identificacion,",
				"nro_identificacion,",
				"nombres,",
				"apellidos,",
				"correo_personal,",
				"correo_institucional,",
				"genero,",
				"etnia,",
				"estado_civil,",
				"toString(fecha_nacimiento),",
				"telefono,",
				"celular,",
				"toString(indicador_extranjero), ",
				"nacionalidad, ",
				"toString(tiene_discapacidad), ",
				"toString(sufre_enfermedad_catastrofica),",
				"toString(estudiante_tiene_trastorno_aprendizaje), ",
				"pais_nacimiento,",
				"region_nacimiento,",
				"provincia_nacimiento,",
				"ciudad_nacimiento,",
				"parroquia_nacimiento,",
				"pais_residencia,",
				"region_residencia,",
				"provincia_residencia,",
				"ciudad_residencia,",
				"parroquia_residencia,",
				"direccion_calle_principal,",
				"direccion_calle_secundaria,",
				"barrio_sector,",
				"toString(aud_fecha_adicion), ",
				"toString(aud_fecha_modificacion))),",
				"          FECHA_ULTIMA_ACTUALIZACION = toDate(currentTimestamp()),",
				"          LINAJE = 'ins_alumno, cliente_local') ~> updatecreatehash",
				"vericacionduplicados filter(aud_fecha_adicion == FECHA_ULTIMA_ACTUALIZACION) ~> filter1",
				"definciontipodecampo sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['POSTULANTES_FINAL.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}