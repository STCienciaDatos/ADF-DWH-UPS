{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFWH-UPS"
		},
		"CONNECT_REPLICA_PROD_UPS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'CONNECT_REPLICA_PROD_UPS'"
		},
		"PostgreSql1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'PostgreSql1'"
		},
		"CONNECT_REPLICA_PROD_UPS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"CONNECT_REPLICA_PROD_UPS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "db_replicaprod_fdw"
		},
		"CONNECT_REPLICA_PROD_UPS_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		},
		"PostgreSql1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"PostgreSql1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "postgres"
		},
		"PostgreSql1_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FAC_INSTITUCION_FINAL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "FAC_INSTITUCION_PROCEDENCIA"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FAC_INSTITUCION_FINAL.parquet",
						"folderPath": "vdirectory_fac_institucion",
						"container": "container-ins-mat"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAC_INSTITUCION_PARQUET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "FAC_INSTITUCION_PROCEDENCIA"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FAC_INSTITUCION.parquet",
						"folderPath": "vdirectory_fac_institucion",
						"container": "container-ins-mat"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAC_MATRICULA_PARQUET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "FAC_MATRICULA"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FAC_MATRICULA.parquet",
						"folderPath": "vdirectory_fac_matricula",
						"container": "container-ins-mat"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CONNECT_REPLICA_PROD_UPS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CONEXIÃ“N REPLICA PROD",
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('CONNECT_REPLICA_PROD_UPS_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('CONNECT_REPLICA_PROD_UPS_properties_typeProperties_database')]",
					"username": "[parameters('CONNECT_REPLICA_PROD_UPS_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('CONNECT_REPLICA_PROD_UPS_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				},
				"connectVia": {
					"referenceName": "IntegrationRuntimeCD",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PostgreSql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('PostgreSql1_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('PostgreSql1_properties_typeProperties_database')]",
					"username": "[parameters('PostgreSql1_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('PostgreSql1_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic",
					"connectionTimeout": 120,
					"pooling": true
				},
				"connectVia": {
					"referenceName": "IntegrationRuntimeCD",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/quitaDuplicados_InsertaDim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dwh_lookup.dim_postulante_alumno_lookup"
							},
							{
								"name": "Destination",
								"value": "dwh_ups.dim_postulante_alumno"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "SELECT DISTINCT ON (codigo_interno_pos_alu)\n    codigo_interno_pos_alu,\n    tipo_identificacion,\n    nro_identificacion,\n    nombres,\n    apellidos,\n    correo_personal,\n    correo_institucional,\n    genero,\n    etnia,\n    estado_civil,\n    fecha_nacimiento,\n    telefono,\n    celular,\n    indicador_extranjero,\n    nacionalidad,\n    indicador_discapacidad,\n    indicador_enfermedad_catastrofica,\n    indicador_nec_esp_aprendizaje,\n    fecha_adicion,\n    fecha_modificacion,\n    pais_nacimiento,\n    region_nacimiento,\n    provincia_nacimiento,\n    ciudad_nacimiento,\n    parroquia_nacimiento,\n    pais_residencia,\n    region_residencia,\n    provincia_residencia,\n    ciudad_residencia,\n    parroquia_residencia,\n    direccion_calle_principal,\n    direccion_calle_secundaria,\n    barrio_sector,\n    hash,\n    fecha_ultima_modificacion,\n    linaje\nFROM dwh_lookup.dim_postulante_alumno_lookup\nORDER BY codigo_interno_pos_alu, fecha_ultima_modificacion DESC;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzurePostgreSqlSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "codigo_interno_pos_alu",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "codigo_interno_pos_alu",
											"type": "Decimal",
											"physicalType": "numeric"
										}
									},
									{
										"source": {
											"name": "tipo_identificacion",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "tipo_identificacion",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "nro_identificacion",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "nro_identificacion",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "nombres",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "nombres",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "apellidos",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "apellidos",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "correo_personal",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "correo_personal",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "correo_institucional",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "correo_institucional",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "genero",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "genero",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "etnia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "etnia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "estado_civil",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "estado_civil",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "fecha_nacimiento",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "fecha_nacimiento",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "telefono",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "telefono",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "celular",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "celular",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "indicador_extranjero",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "indicador_extranjero",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "nacionalidad",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "nacionalidad",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "indicador_discapacidad",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "indicador_discapacidad",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "indicador_enfermedad_catastrofica",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "indicador_enfermedad_catastrofica",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "indicador_nec_esp_aprendizaje",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "indicador_nec_esp_aprendizaje",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "fecha_adicion",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "fecha_adicion",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "fecha_modificacion",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "fecha_modificacion",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "pais_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "pais_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "region_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "region_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "provincia_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "provincia_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ciudad_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "ciudad_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "parroquia_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "parroquia_nacimiento",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "pais_residencia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "pais_residencia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "region_residencia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "region_residencia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "provincia_residencia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "provincia_residencia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ciudad_residencia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "ciudad_residencia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "parroquia_residencia",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "parroquia_residencia",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "direccion_calle_principal",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "direccion_calle_principal",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "direccion_calle_secundaria",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "direccion_calle_secundaria",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "barrio_sector",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "barrio_sector",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AZ_PG_POSTULANTE_ALUMNO_LOOKUPS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZURE_DWH_POS_ALU",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "IngestaDimDepurada"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_DIM_INSTITUCION_EDUCATIVA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "FT_DIM_INSTITUCION_EDUCATIVA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_DIM_PERIODO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SRV_MIRROR"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "VIEW_DIM_PERIODO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_DIM_POSTULANTE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SRV_MIRROR"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "VIEW_DIM_POSTULANTE_ALUMNO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_FACT_INSCRIPCION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "FT_FAC_INSCRIPCION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_FACT_MATRICULA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "FT_FAC_MATRICULA_PAGOS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_FAC_INSTITUCION_EDUCATIVA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "FT_DIM_INS_EDU_PROCEDENCIA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VIEW_PROGRAMA_ACADEMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CONNECT_REPLICA_PROD_UPS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "SRV_MIRROR"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "REPLICA_SCHEMA",
					"table": "VIEW_DIM_PROGRAMA_ACADEMICO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CONNECT_REPLICA_PROD_UPS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_institucion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_INSTITUCION_EDUCATIVA"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DIM_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DIM_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DIM_PERIODO_PARQUET"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "actualizacionycreaciondelhash"
						},
						{
							"name": "verificaciondeduplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CODIGO_INTERNO_INS_EDU as decimal(38,18),",
						"          INSTITUCION_EDUCATIVA as string,",
						"          CATEGORIA_INSTITUCION as string,",
						"          TIPO_INSTITUCION as string,",
						"          PAIS_INS_EDU as string,",
						"          PROVINCIA_INS_EDU as string,",
						"          CIUDAD_INS_EDU as string,",
						"          NIVEL_INS_EDU as string,",
						"          AUD_FECHA_ADICION as timestamp,",
						"          AUD_FECHA_MODIFICACION as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(CODIGO_INTERNO_INS_EDU = iifNull(CODIGO_INTERNO_INS_EDU, -1),",
						"          INSTITUCION_EDUCATIVA = iifNull(INSTITUCION_EDUCATIVA, \"SIN DATO\"),",
						"          CATEGORIA_INSTITUCION = iifNull(CATEGORIA_INSTITUCION, \"SIN DATO\"),",
						"          TIPO_INSTITUCION = iifNull(TIPO_INSTITUCION, \"SIN DATO\"),",
						"          PAIS_INS_EDU = iifNull(PAIS_INS_EDU, \"SIN DATO\"),",
						"          PROVINCIA_INS_EDU = iifNull(PROVINCIA_INS_EDU, \"SIN DATO\"),",
						"          CIUDAD_INS_EDU = iifNull(CIUDAD_INS_EDU, \"SIN DATO\"),",
						"          NIVEL_INS_EDU = iifNull(NIVEL_INS_EDU, \"SIN DATO\"),",
						"          AUD_FECHA_ADICION = iifNull(AUD_FECHA_ADICION, toTimestamp('1900-01-01T00:00:00Z')),",
						"          AUD_FECHA_MODIFICACION = iif(    isNull(AUD_FECHA_MODIFICACION) || toString(AUD_FECHA_MODIFICACION) == '',    toDate('1900-01-01'),    toDate(toString(AUD_FECHA_MODIFICACION, 'yyyy-MM-dd')))) ~> derivedColumn",
						"verificaciondeduplicados cast(output(",
						"          HASH as string,",
						"          CODIGO_INTERNO_INS_EDU as integer,",
						"          INSTITUCION_EDUCATIVA as string,",
						"          CATEGORIA_INSTITUCION as string,",
						"          TIPO_INSTITUCION as string,",
						"          PAIS_INS_EDU as string,",
						"          PROVINCIA_INS_EDU as string,",
						"          CIUDAD_INS_EDU as string,",
						"          NIVEL_INS_EDU as string,",
						"          AUD_FECHA_ADICION as date,",
						"          AUD_FECHA_MODIFICACION as date,",
						"          FECHA_ULTIMA_ACTUALIZACION as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"derivedColumn derive(HASH = md5(concat(toString(CODIGO_INTERNO_INS_EDU), INSTITUCION_EDUCATIVA, CATEGORIA_INSTITUCION, toString(TIPO_INSTITUCION), toString(PAIS_INS_EDU), toString(PROVINCIA_INS_EDU), toString(PROVINCIA_INS_EDU), CIUDAD_INS_EDU, toString(NIVEL_INS_EDU), toString(AUD_FECHA_ADICION))),",
						"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
						"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
						"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
						"     CODIGO_INTERNO_INS_EDU = max(CODIGO_INTERNO_INS_EDU),",
						"          INSTITUCION_EDUCATIVA = max(INSTITUCION_EDUCATIVA),",
						"          CATEGORIA_INSTITUCION = max(CATEGORIA_INSTITUCION),",
						"          TIPO_INSTITUCION = max(TIPO_INSTITUCION),",
						"          PAIS_INS_EDU = max(PAIS_INS_EDU),",
						"          PROVINCIA_INS_EDU = max(PROVINCIA_INS_EDU),",
						"          CIUDAD_INS_EDU = max(PROVINCIA_INS_EDU),",
						"          NIVEL_INS_EDU = max(NIVEL_INS_EDU),",
						"          AUD_FECHA_ADICION = max(AUD_FECHA_ADICION),",
						"          AUD_FECHA_MODIFICACION = max(AUD_FECHA_MODIFICACION),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['DIM_INSTITUCION_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_institucion_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_INSTITUCION_EDUCATIVA"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DIM_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DIM_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DIM_PERIODO_PARQUET"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "actualizacionycreaciondelhash"
						},
						{
							"name": "verificaciondeduplicados"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CODIGO_INTERNO_INS_EDU as decimal(38,18),",
						"          INSTITUCION_EDUCATIVA as string,",
						"          CATEGORIA_INSTITUCION as string,",
						"          TIPO_INSTITUCION as string,",
						"          PAIS_INS_EDU as string,",
						"          PROVINCIA_INS_EDU as string,",
						"          CIUDAD_INS_EDU as string,",
						"          NIVEL_INS_EDU as string,",
						"          AUD_FECHA_ADICION as timestamp,",
						"          AUD_FECHA_MODIFICACION as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(CODIGO_INTERNO_INS_EDU = iifNull(CODIGO_INTERNO_INS_EDU, -1),",
						"          INSTITUCION_EDUCATIVA = iifNull(INSTITUCION_EDUCATIVA, \"SIN DATO\"),",
						"          CATEGORIA_INSTITUCION = iifNull(CATEGORIA_INSTITUCION, \"SIN DATO\"),",
						"          TIPO_INSTITUCION = iifNull(TIPO_INSTITUCION, \"SIN DATO\"),",
						"          PAIS_INS_EDU = iifNull(PAIS_INS_EDU, \"SIN DATO\"),",
						"          PROVINCIA_INS_EDU = iifNull(PROVINCIA_INS_EDU, \"SIN DATO\"),",
						"          CIUDAD_INS_EDU = iifNull(CIUDAD_INS_EDU, \"SIN DATO\"),",
						"          NIVEL_INS_EDU = iifNull(NIVEL_INS_EDU, \"SIN DATO\"),",
						"          AUD_FECHA_ADICION = iifNull(AUD_FECHA_ADICION, toTimestamp('1900-01-01T00:00:00Z')),",
						"          AUD_FECHA_MODIFICACION = iif(    isNull(AUD_FECHA_MODIFICACION) || toString(AUD_FECHA_MODIFICACION) == '',    toDate('1900-01-01'),    toDate(toString(AUD_FECHA_MODIFICACION, 'yyyy-MM-dd')))) ~> derivedColumn",
						"filter1 cast(output(",
						"          HASH as string,",
						"          CODIGO_INTERNO_INS_EDU as integer,",
						"          INSTITUCION_EDUCATIVA as string,",
						"          CATEGORIA_INSTITUCION as string,",
						"          TIPO_INSTITUCION as string,",
						"          PAIS_INS_EDU as string,",
						"          PROVINCIA_INS_EDU as string,",
						"          CIUDAD_INS_EDU as string,",
						"          NIVEL_INS_EDU as string,",
						"          AUD_FECHA_ADICION as date,",
						"          AUD_FECHA_MODIFICACION as date,",
						"          FECHA_ULTIMA_ACTUALIZACION as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"derivedColumn derive(HASH = md5(concat(toString(CODIGO_INTERNO_INS_EDU), INSTITUCION_EDUCATIVA, CATEGORIA_INSTITUCION, toString(TIPO_INSTITUCION), toString(PAIS_INS_EDU), toString(PROVINCIA_INS_EDU), toString(PROVINCIA_INS_EDU), CIUDAD_INS_EDU, toString(NIVEL_INS_EDU), toString(AUD_FECHA_ADICION))),",
						"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
						"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
						"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
						"     CODIGO_INTERNO_INS_EDU = max(CODIGO_INTERNO_INS_EDU),",
						"          INSTITUCION_EDUCATIVA = max(INSTITUCION_EDUCATIVA),",
						"          CATEGORIA_INSTITUCION = max(CATEGORIA_INSTITUCION),",
						"          TIPO_INSTITUCION = max(TIPO_INSTITUCION),",
						"          PAIS_INS_EDU = max(PAIS_INS_EDU),",
						"          PROVINCIA_INS_EDU = max(PROVINCIA_INS_EDU),",
						"          CIUDAD_INS_EDU = max(PROVINCIA_INS_EDU),",
						"          NIVEL_INS_EDU = max(NIVEL_INS_EDU),",
						"          AUD_FECHA_ADICION = max(AUD_FECHA_ADICION),",
						"          AUD_FECHA_MODIFICACION = max(AUD_FECHA_MODIFICACION),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
						"verificaciondeduplicados filter(AUD_FECHA_ADICION== FECHA_ULTIMA_ACTUALIZACION) ~> filter1",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['DIM_INSTITUCION_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_institucion_procedencia')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/FAC_INSTITUCION_PROCEDENCIA"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FAC_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FAC_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DIM_PERIODO_PARQUET"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "actualizacionycreaciondelhash"
						},
						{
							"name": "verificaciondeduplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TITULO_BACHILLERATO as string,",
						"          FECHA_GRADUACION as timestamp,",
						"          CALIF_GRADUACION as decimal(38,18),",
						"          CALIF_SOBRE as decimal(38,18),",
						"          CODIGO_INTERNO_INS_EDU as decimal(38,18),",
						"          CODIGO_INTERNO_POSTULANTE as decimal(38,18),",
						"          AUD_FECHA_ADICION as timestamp,",
						"          AUD_FECHA_MODIFICACION as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(TITULO_BACHILLERATO = iifNull(TITULO_BACHILLERATO, \"SIN DATO\"),",
						"          FECHA_GRADUACION = iif(    isNull(FECHA_GRADUACION) || toString(FECHA_GRADUACION) == '',    toDate('1900-01-01'),    toDate(toString(FECHA_GRADUACION, 'yyyy-MM-dd'))),",
						"          CALIF_GRADUACION = iifNull(CALIF_GRADUACION, -1),",
						"          CALIF_SOBRE = iifNull(CALIF_SOBRE, -1),",
						"          CODIGO_INTERNO_INS_EDU = iifNull(CODIGO_INTERNO_INS_EDU, -1),",
						"          CODIGO_INTERNO_POSTULANTE = iifNull(CODIGO_INTERNO_POSTULANTE, -1),",
						"          AUD_FECHA_ADICION = iifNull(AUD_FECHA_ADICION, toTimestamp('1900-01-01T00:00:00Z')),",
						"          AUD_FECHA_MODIFICACION = iif(    isNull(AUD_FECHA_MODIFICACION) || toString(AUD_FECHA_MODIFICACION) == '',    toDate('1900-01-01'),    toDate(toString(AUD_FECHA_MODIFICACION, 'yyyy-MM-dd')))) ~> derivedColumn",
						"verificaciondeduplicados cast(output(",
						"          HASH as string,",
						"          TITULO_BACHILLERATO as string,",
						"          FECHA_GRADUACION as date,",
						"          CALIF_GRADUACION as integer,",
						"          CALIF_SOBRE as integer,",
						"          CODIGO_INTERNO_INS_EDU as integer,",
						"          CODIGO_INTERNO_POSTULANTE as integer,",
						"          AUD_FECHA_ADICION as date,",
						"          AUD_FECHA_MODIFICACION as date,",
						"          FECHA_ULTIMA_ACTUALIZACION as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"derivedColumn derive(HASH = md5(concat(toString(TITULO_BACHILLERATO), TITULO_BACHILLERATO, toString(CALIF_GRADUACION), toString(CALIF_SOBRE), toString(CODIGO_INTERNO_INS_EDU), toString(CODIGO_INTERNO_POSTULANTE), toString(CODIGO_INTERNO_POSTULANTE), toString(AUD_FECHA_ADICION))),",
						"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
						"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
						"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
						"     TITULO_BACHILLERATO = max(TITULO_BACHILLERATO),",
						"          FECHA_GRADUACION = max(FECHA_GRADUACION),",
						"          CALIF_GRADUACION = max(CALIF_GRADUACION),",
						"          CALIF_SOBRE = max(CALIF_SOBRE),",
						"          CODIGO_INTERNO_INS_EDU = max(CODIGO_INTERNO_INS_EDU),",
						"          CODIGO_INTERNO_POSTULANTE = max(CODIGO_INTERNO_POSTULANTE),",
						"          AUD_FECHA_ADICION = max(AUD_FECHA_ADICION),",
						"          AUD_FECHA_MODIFICACION = max(AUD_FECHA_MODIFICACION),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['FAC_INSTITUCION_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FAC_INSTITUCION_PARQUET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_institucion_procedencia_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/FAC_INSTITUCION_PROCEDENCIA"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FAC_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FAC_INSTITUCION_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DIM_PERIODO_PARQUET"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "actualizacionycreaciondelhash"
						},
						{
							"name": "verificaciondeduplicados"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TITULO_BACHILLERATO as string,",
						"          FECHA_GRADUACION as timestamp,",
						"          CALIF_GRADUACION as decimal(38,18),",
						"          CALIF_SOBRE as decimal(38,18),",
						"          CODIGO_INTERNO_INS_EDU as decimal(38,18),",
						"          CODIGO_INTERNO_POSTULANTE as decimal(38,18),",
						"          AUD_FECHA_ADICION as timestamp,",
						"          AUD_FECHA_MODIFICACION as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(TITULO_BACHILLERATO = iifNull(TITULO_BACHILLERATO, \"SIN DATO\"),",
						"          FECHA_GRADUACION = iif(    isNull(FECHA_GRADUACION) || toString(FECHA_GRADUACION) == '',    toDate('1900-01-01'),    toDate(toString(FECHA_GRADUACION, 'yyyy-MM-dd'))),",
						"          CALIF_GRADUACION = iifNull(CALIF_GRADUACION, -1),",
						"          CALIF_SOBRE = iifNull(CALIF_SOBRE, -1),",
						"          CODIGO_INTERNO_INS_EDU = iifNull(CODIGO_INTERNO_INS_EDU, -1),",
						"          CODIGO_INTERNO_POSTULANTE = iifNull(CODIGO_INTERNO_POSTULANTE, -1),",
						"          AUD_FECHA_ADICION = iifNull(AUD_FECHA_ADICION, toTimestamp('1900-01-01T00:00:00Z')),",
						"          AUD_FECHA_MODIFICACION = iif(    isNull(AUD_FECHA_MODIFICACION) || toString(AUD_FECHA_MODIFICACION) == '',    toDate('1900-01-01'),    toDate(toString(AUD_FECHA_MODIFICACION, 'yyyy-MM-dd')))) ~> derivedColumn",
						"filter1 cast(output(",
						"          HASH as string,",
						"          TITULO_BACHILLERATO as string,",
						"          FECHA_GRADUACION as date,",
						"          CALIF_GRADUACION as integer,",
						"          CALIF_SOBRE as integer,",
						"          CODIGO_INTERNO_INS_EDU as integer,",
						"          CODIGO_INTERNO_POSTULANTE as integer,",
						"          AUD_FECHA_ADICION as date,",
						"          AUD_FECHA_MODIFICACION as date,",
						"          FECHA_ULTIMA_ACTUALIZACION as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"derivedColumn derive(HASH = md5(concat(toString(TITULO_BACHILLERATO), TITULO_BACHILLERATO, toString(CALIF_GRADUACION), toString(CALIF_SOBRE), toString(CODIGO_INTERNO_INS_EDU), toString(CODIGO_INTERNO_POSTULANTE), toString(CODIGO_INTERNO_POSTULANTE), toString(AUD_FECHA_ADICION))),",
						"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
						"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
						"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
						"     TITULO_BACHILLERATO = max(TITULO_BACHILLERATO),",
						"          FECHA_GRADUACION = max(FECHA_GRADUACION),",
						"          CALIF_GRADUACION = max(CALIF_GRADUACION),",
						"          CALIF_SOBRE = max(CALIF_SOBRE),",
						"          CODIGO_INTERNO_INS_EDU = max(CODIGO_INTERNO_INS_EDU),",
						"          CODIGO_INTERNO_POSTULANTE = max(CODIGO_INTERNO_POSTULANTE),",
						"          AUD_FECHA_ADICION = max(AUD_FECHA_ADICION),",
						"          AUD_FECHA_MODIFICACION = max(AUD_FECHA_MODIFICACION),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
						"verificaciondeduplicados filter(AUD_FECHA_ADICION == FECHA_ULTIMA_ACTUALIZACION) ~> filter1",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['FAC_INSTITUCION_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FAC_INSTITUCION_PARQUET')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_periodo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_PERIODO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DIM_PERIODO_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DIM_PERIODO_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "Export data to DIM_PERIODO_PARQUET"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "actualizacionycreaciondelhash"
						},
						{
							"name": "verificaciondeduplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          codigo_interno_periodo_cohorte as decimal(38,18),",
						"          periodo as string,",
						"          indicador_par_impar as string,",
						"          anio_ini_periodo as decimal(38,18),",
						"          mes_ini_periodo as decimal(38,18),",
						"          fecha_inicio_periodo as timestamp,",
						"          fecha_fin_periodo as timestamp,",
						"          tipo_periodo_cohorte as string,",
						"          aud_fecha_adicion as timestamp,",
						"          aud_fecha_modificacion as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(codigo_interno_periodo_cohorte = iifNull(codigo_interno_periodo_cohorte, -1),",
						"          periodo = iifNull(periodo, \"SIN DATO\"),",
						"          indicador_par_impar = iifNull(indicador_par_impar, \"SIN DATO\"),",
						"          anio_ini_periodo = iifNull(anio_ini_periodo, -1),",
						"          mes_ini_periodo = iifNull(mes_ini_periodo, -1),",
						"          fecha_inicio_periodo = iifNull(fecha_inicio_periodo, toTimestamp('1900-01-01T00:00:00Z')),",
						"          fecha_fin_periodo = iifNull(fecha_fin_periodo, toTimestamp('1900-01-01T00:00:00Z')),",
						"          tipo_periodo_cohorte = iifNull(tipo_periodo_cohorte, \"SIN DATO\"),",
						"          aud_fecha_adicion = iifNull(aud_fecha_adicion, toTimestamp('1900-01-01T00:00:00Z')),",
						"          aud_fecha_modificacion = iif(    isNull(aud_fecha_modificacion) || toString(aud_fecha_modificacion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_modificacion, 'yyyy-MM-dd')))) ~> derivedColumn",
						"verificaciondeduplicados cast(output(",
						"          HASH as string,",
						"          codigo_interno_periodo_cohorte as integer,",
						"          periodo as string,",
						"          indicador_par_impar as string,",
						"          anio_ini_periodo as integer,",
						"          mes_ini_periodo as integer,",
						"          fecha_inicio_periodo as date,",
						"          fecha_fin_periodo as date,",
						"          tipo_periodo_cohorte as string,",
						"          aud_fecha_adicion as date,",
						"          aud_fecha_modificacion as date,",
						"          FECHA_ULTIMA_ACTUALIZACION as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"derivedColumn derive(HASH = md5(concat(toString(codigo_interno_periodo_cohorte), periodo, indicador_par_impar, toString(anio_ini_periodo), toString(mes_ini_periodo), toString(fecha_inicio_periodo), toString(fecha_fin_periodo), tipo_periodo_cohorte, toString(aud_fecha_adicion), toString(aud_fecha_modificacion))),",
						"          FECHA_ULTIMA_ACTUALIZACION = currentTimestamp(),",
						"          LINAJE = 'ins_alumno, cliente_local, ins_raza, ins_estado_civil') ~> actualizacionycreaciondelhash",
						"actualizacionycreaciondelhash aggregate(groupBy(HASH),",
						"     codigo_interno_periodo_cohorte = max(codigo_interno_periodo_cohorte),",
						"          periodo = max(periodo),",
						"          indicador_par_impar = max(indicador_par_impar),",
						"          anio_ini_periodo = max(anio_ini_periodo),",
						"          mes_ini_periodo = max(mes_ini_periodo),",
						"          fecha_inicio_periodo = max(fecha_inicio_periodo),",
						"          fecha_fin_periodo = max(fecha_fin_periodo),",
						"          tipo_periodo_cohorte = max(tipo_periodo_cohorte),",
						"          aud_fecha_adicion = max(aud_fecha_adicion),",
						"          aud_fecha_modificacion = max(aud_fecha_modificacion),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> verificaciondeduplicados",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['DIM_PERIODO_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_periodo_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_PERIODO"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DIM_PERIODO_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DIM_PERIODO_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "updatenullvaluesformat"
						},
						{
							"name": "vericacionduplicados"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "updatecreatehash"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          codigo_interno_periodo_cohorte as decimal(38,18),",
						"          periodo as string,",
						"          indicador_par_impar as string,",
						"          anio_ini_periodo as decimal(38,18),",
						"          mes_ini_periodo as decimal(38,18),",
						"          fecha_inicio_periodo as timestamp,",
						"          fecha_fin_periodo as timestamp,",
						"          tipo_periodo_cohorte as string,",
						"          aud_fecha_adicion as timestamp,",
						"          aud_fecha_modificacion as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(codigo_interno_periodo_cohorte = iifNull(codigo_interno_periodo_cohorte, -1),",
						"          periodo = iifNull(periodo, \"SIN DATO\"),",
						"          indicador_par_impar = iifNull(indicador_par_impar, \"SIN DATO\"),",
						"          anio_ini_periodo = iifNull(anio_ini_periodo, -1),",
						"          mes_ini_periodo = iifNull(mes_ini_periodo, -1),",
						"          fecha_inicio_periodo = iifNull(fecha_inicio_periodo, toTimestamp('1900-01-01T00:00:00Z')),",
						"          fecha_fin_periodo = iifNull(fecha_fin_periodo, toTimestamp('1900-01-01T00:00:00Z')),",
						"          tipo_periodo_cohorte = iifNull(tipo_periodo_cohorte, \"SIN DATO\"),",
						"          aud_fecha_adicion = iif(    isNull(aud_fecha_adicion) || toString(aud_fecha_adicion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_adicion, 'yyyy-MM-dd'))),",
						"          aud_fecha_modificacion = iif(",
						"    isNull(aud_fecha_modificacion) || toString(aud_fecha_modificacion) == '',",
						"    toDate('1900-01-01'),",
						"    toDate(toString(aud_fecha_modificacion, 'yyyy-MM-dd'))",
						")) ~> updatenullvaluesformat",
						"updatecreatehash aggregate(groupBy(HASH),",
						"     codigo_interno_periodo_cohorte = max(codigo_interno_periodo_cohorte),",
						"          periodo = max(periodo),",
						"          indicador_par_impar = max(indicador_par_impar),",
						"          anio_ini_periodo = max(anio_ini_periodo),",
						"          mes_ini_periodo = max(mes_ini_periodo),",
						"          fecha_inicio_periodo = max(fecha_inicio_periodo),",
						"          fecha_fin_periodo = max(fecha_fin_periodo),",
						"          tipo_periodo_cohorte = max(tipo_periodo_cohorte),",
						"          aud_fecha_adicion = max(aud_fecha_adicion),",
						"          aud_fecha_modificacion = max(aud_fecha_modificacion),",
						"          FECHA_ULTIMA_ACTUALIZACION_DW = max(FECHA_ULTIMA_ACTUALIZACION_DW),",
						"          LINAJE = max(LINAJE)) ~> vericacionduplicados",
						"filter1 cast(output(",
						"          HASH as string,",
						"          codigo_interno_periodo_cohorte as integer,",
						"          periodo as string,",
						"          indicador_par_impar as string,",
						"          anio_ini_periodo as integer,",
						"          mes_ini_periodo as integer,",
						"          fecha_inicio_periodo as date,",
						"          fecha_fin_periodo as date,",
						"          tipo_periodo_cohorte as string,",
						"          aud_fecha_adicion as date,",
						"          aud_fecha_modificacion as date,",
						"          FECHA_ULTIMA_ACTUALIZACION_DW as date,",
						"          LINAJE as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"updatenullvaluesformat derive(HASH = md5(concat(toString(codigo_interno_periodo_cohorte), periodo, indicador_par_impar, toString(anio_ini_periodo), toString(mes_ini_periodo), toString(fecha_inicio_periodo), toString(fecha_fin_periodo), tipo_periodo_cohorte, toString(aud_fecha_adicion), toString(aud_fecha_modificacion))),",
						"          FECHA_ULTIMA_ACTUALIZACION_DW = toDate(currentTimestamp()),",
						"          LINAJE = 'ins_alumno, cliente_local') ~> updatecreatehash",
						"vericacionduplicados filter(aud_fecha_adicion == FECHA_ULTIMA_ACTUALIZACION_DW) ~> filter1",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['DIM_PERIODO_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_postulantes_delta')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DF_INSCRIPCIONES_MATRICULAS/DIM_POSTULANTES"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DIM_POSTULANTE_PARQUET",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DIM_POSTULANTE_PARQUET",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "updatenullvaluesformat"
						},
						{
							"name": "vericacionduplicados"
						},
						{
							"name": "definciontipodecampo"
						},
						{
							"name": "updatecreatehash"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          codigo_interno_pos_alu as integer,",
						"          tipo_identificacion as string,",
						"          nro_identificacion as string,",
						"          nombres as string,",
						"          apellidos as string,",
						"          correo_personal as string,",
						"          correo_institucional as string,",
						"          genero as string,",
						"          etnia as string,",
						"          estado_civil as string,",
						"          fecha_nacimiento as timestamp,",
						"          telefono as string,",
						"          celular as string,",
						"          indicador_extranjero as string,",
						"          nacionalidad as string,",
						"          tiene_discapacidad as string,",
						"          sufre_enfermedad_catastrofica as string,",
						"          estudiante_tiene_trastorno_aprendizaje as string,",
						"          pais_nacimiento as string,",
						"          region_nacimiento as string,",
						"          provincia_nacimiento as string,",
						"          ciudad_nacimiento as string,",
						"          parroquia_nacimiento as string,",
						"          pais_residencia as string,",
						"          region_residencia as string,",
						"          provincia_residencia as string,",
						"          ciudad_residencia as string,",
						"          parroquia_residencia as string,",
						"          direccion_calle_principal as string,",
						"          direccion_calle_secundaria as string,",
						"          barrio_sector as string,",
						"          aud_fecha_adicion as timestamp,",
						"          aud_fecha_modificacion as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source",
						"source derive(codigo_interno_pos_alu = iifNull(codigo_interno_pos_alu, -1),",
						"          tipo_identificacion = iifNull(tipo_identificacion, 'SIN DATO'),",
						"          nro_identificacion = iifNull(nro_identificacion, 'SIN DATO'),",
						"          nombres = iifNull(nombres, 'SIN DATO'),",
						"          apellidos = iifNull(apellidos, 'SIN DATO'),",
						"          correo_personal = iifNull(correo_personal, 'SIN DATO'),",
						"          correo_institucional = iifNull(correo_institucional, 'SIN DATO'),",
						"          genero = iifNull(genero, 'SIN DATO'),",
						"          etnia = iifNull(etnia, 'SIN DATO'),",
						"          estado_civil = iifNull(estado_civil,'SIN DATO'),",
						"          fecha_nacimiento = iif(    isNull(fecha_nacimiento) || toString(fecha_nacimiento) == '',    toDate('1900-01-01'),    toDate(toString(fecha_nacimiento, 'yyyy-MM-dd'))),",
						"          telefono = iifNull(telefono, 'SIN DATO'),",
						"          celular = iifNull(celular, \"SIN DATO\"),",
						"          indicador_extranjero = iifNull(indicador_extranjero, \"SIN DATO\"),",
						"          nacionalidad = iifNull(nacionalidad, \"SIN DATO\"),",
						"          tiene_discapacidad = iifNull(tiene_discapacidad, \"FALSE\"),",
						"          sufre_enfermedad_catastrofica = iifNull(sufre_enfermedad_catastrofica, \"FALSE\"),",
						"          estudiante_tiene_trastorno_aprendizaje = iifNull(estudiante_tiene_trastorno_aprendizaje, \"FALSE\"),",
						"          pais_nacimiento = iifNull(pais_nacimiento, \"SIN DATO\"),",
						"          region_nacimiento = iifNull(region_nacimiento, \"SIN DATO\"),",
						"          provincia_nacimiento = iifNull(provincia_nacimiento, \"SIN DATO\"),",
						"          ciudad_nacimiento = iifNull(ciudad_nacimiento, \"SIN DATO\"),",
						"          parroquia_nacimiento = iifNull(parroquia_nacimiento, \"SIN DATO\"),",
						"          pais_residencia = iifNull(pais_residencia, \"SIN DATO\"),",
						"          region_residencia = iifNull(region_residencia, \"SIN DATO\"),",
						"          provincia_residencia = iifNull(provincia_residencia, \"SIN DATO\"),",
						"          ciudad_residencia = iifNull(ciudad_residencia, \"SIN DATO\"),",
						"          parroquia_residencia = iifNull(parroquia_residencia, \"SIN DATO\"),",
						"          direccion_calle_principal = iif(or(isNull(direccion_calle_principal), equals(direccion_calle_principal, \".\")), \"SIN DATO\", direccion_calle_principal),",
						"          direccion_calle_secundaria = iif(or(isNull(direccion_calle_secundaria), equals(direccion_calle_secundaria, \".\")), \"SIN DATO\", direccion_calle_secundaria),",
						"          barrio_sector = iif(or(isNull(barrio_sector), equals(barrio_sector, \".\")), \"SIN DATO\", barrio_sector),",
						"          aud_fecha_adicion = iif(    isNull(aud_fecha_adicion) || toString(aud_fecha_adicion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_adicion, 'yyyy-MM-dd'))),",
						"          aud_fecha_modificacion = iif(    isNull(aud_fecha_modificacion) || toString(aud_fecha_modificacion) == '',    toDate('1900-01-01'),    toDate(toString(aud_fecha_modificacion, 'yyyy-MM-dd')))) ~> updatenullvaluesformat",
						"updatecreatehash aggregate(groupBy(HASH),",
						"     codigo_interno_pos_alu = max(codigo_interno_pos_alu),",
						"          tipo_identificacion = max(tipo_identificacion),",
						"          nro_identificacion = max(nro_identificacion),",
						"          nombres = max(nombres),",
						"          apellidos = max(apellidos),",
						"          correo_personal = max(correo_personal),",
						"          correo_institucional = max(correo_institucional),",
						"          genero = max(genero),",
						"          etnia = max(etnia),",
						"          estado_civil = max(estado_civil),",
						"          fecha_nacimiento = max(fecha_nacimiento),",
						"          telefono = max(telefono),",
						"          celular = max(celular),",
						"          indicador_extranjero = max(indicador_extranjero),",
						"          nacionalidad = max(nacionalidad),",
						"          tiene_discapacidad = max(tiene_discapacidad),",
						"          sufre_enfermedad_catastrofica = max(sufre_enfermedad_catastrofica),",
						"          estudiante_tiene_trastorno_aprendizaje = max(estudiante_tiene_trastorno_aprendizaje),",
						"          pais_nacimiento = max(pais_nacimiento),",
						"          region_nacimiento = max(region_nacimiento),",
						"          provincia_nacimiento = max(provincia_nacimiento),",
						"          ciudad_nacimiento = max(ciudad_nacimiento),",
						"          parroquia_nacimiento = max(parroquia_nacimiento),",
						"          pais_residencia = max(pais_residencia),",
						"          region_residencia = max(region_residencia),",
						"          provincia_residencia = max(provincia_residencia),",
						"          ciudad_residencia = max(ciudad_residencia),",
						"          parroquia_residencia = max(parroquia_residencia),",
						"          direccion_calle_principal = max(direccion_calle_principal),",
						"          direccion_calle_secundaria = max(direccion_calle_secundaria),",
						"          barrio_sector = max(barrio_sector),",
						"          aud_fecha_adicion = max(aud_fecha_adicion),",
						"          aud_fecha_modificacion = max(aud_fecha_modificacion),",
						"          FECHA_ULTIMA_ACTUALIZACION = max(FECHA_ULTIMA_ACTUALIZACION),",
						"          LINAJE = max(LINAJE)) ~> vericacionduplicados",
						"filter1 cast(output(",
						"          HASH as string",
						"     ),",
						"     errors: true) ~> definciontipodecampo",
						"updatenullvaluesformat derive(HASH = md5(concat(toString(codigo_interno_pos_alu),",
						"tipo_identificacion,",
						"nro_identificacion,",
						"nombres,",
						"apellidos,",
						"correo_personal,",
						"correo_institucional,",
						"genero,",
						"etnia,",
						"estado_civil,",
						"toString(fecha_nacimiento),",
						"telefono,",
						"celular,",
						"toString(indicador_extranjero), ",
						"nacionalidad, ",
						"toString(tiene_discapacidad), ",
						"toString(sufre_enfermedad_catastrofica),",
						"toString(estudiante_tiene_trastorno_aprendizaje), ",
						"pais_nacimiento,",
						"region_nacimiento,",
						"provincia_nacimiento,",
						"ciudad_nacimiento,",
						"parroquia_nacimiento,",
						"pais_residencia,",
						"region_residencia,",
						"provincia_residencia,",
						"ciudad_residencia,",
						"parroquia_residencia,",
						"direccion_calle_principal,",
						"direccion_calle_secundaria,",
						"barrio_sector,",
						"toString(aud_fecha_adicion), ",
						"toString(aud_fecha_modificacion))),",
						"          FECHA_ULTIMA_ACTUALIZACION = toDate(currentTimestamp()),",
						"          LINAJE = 'ins_alumno, cliente_local') ~> updatecreatehash",
						"vericacionduplicados filter(aud_fecha_modificacion == FECHA_ULTIMA_ACTUALIZACION || aud_fecha_adicion == FECHA_ULTIMA_ACTUALIZACION) ~> filter1",
						"definciontipodecampo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['POSTULANTES_FINAL.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}